@page "/"

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<div class="new-link-form">
    <h3>Add a New Link</h3>
    <input @bind="newLink.Title" type="text" placeholder="Title" />
    <input @bind="newLink.Url" type="text" placeholder="URL" />
    <button @onclick="AddLink" class="btn btn-primary">Add Link</button>
</div>

<hr />

@if (links is not null)
{
    <div class="link-list">
        @foreach (var link in links)
        {
            <LinkCard Link="@link" OnDelete="DeleteLink" />
        }
    </div>
}

@code {
    private List<BioLinkItem> links = new()
    {
        new() { Id = 1, Title = "My Portfolio", Url = "https://some-portfolio.com" },
        new() { Id = 2, Title = "LinkedIn Profile", Url = "https://linkedin.com/in/some-profile" },
        new() { Id = 3, Title = "GitHub Profile", Url = "https://github.com/some-username" }
    };

    // Object to hold the new link's data
    private BioLinkItem newLink = new();

    /// <summary>
    /// Adds a new link to the list.
    /// </summary>
    private void AddLink()
    {
        if (string.IsNullOrWhiteSpace(newLink.Title) || string.IsNullOrWhiteSpace(newLink.Url))
        {
            return; // Don't add empty links
        }

        // In a non-demo app, the ID would likely be generated by the database.
        // Right now we're generating a simple one as such.
        newLink.Id = links.Any() ? links.Max(l => l.Id) + 1 : 1;
        
        links.Add(newLink);

        // Reset the form by creating a new object for the next entry
        newLink = new();
    }

    /// <summary>
    /// Deletes a link from the list.
    /// </summary>
    private void DeleteLink(int idToDelete)
    {
        var linkToRemove = links.FirstOrDefault(l => l.Id == idToDelete);
        if (linkToRemove is not null)
        {
            links.Remove(linkToRemove);
        }
    }
}
